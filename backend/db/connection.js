// üì¶ Carga de librer√≠as necesarias
const mysql = require("mysql2/promise");
const dotenv = require("dotenv");
const path = require("path");

// ‚úÖ Cargar variables de entorno desde archivo .env
dotenv.config({ path: path.resolve(__dirname, "../.env") });

// üõ°Ô∏è Verificar que las variables esenciales est√©n definidas
const requiredEnvs = ["DB_HOST", "DB_PORT", "DB_USER", "DB_NAME"];
const missing = requiredEnvs.filter((key) => !process.env[key]);

if (missing.length > 0) {
  console.error(
    `[${new Date().toISOString()}] ‚ùå Faltan variables de entorno: ${missing.join(", ")}`
  );
  process.exit(1); // Terminar el proceso si hay errores cr√≠ticos
}

// üß™ Diagn√≥stico b√°sico de conexi√≥n (√∫til en modo desarrollo)
console.log("üì° Configuraci√≥n de conexi√≥n MySQL:");
console.log("   DB_HOST:     ", process.env.DB_HOST);
console.log("   DB_PORT:     ", process.env.DB_PORT || 3306);
console.log("   DB_USER:     ", process.env.DB_USER);
console.log("   DB_PASSWORD: ", process.env.DB_PASSWORD ? "‚úîÔ∏è Oculta" : "‚ùå Vac√≠a");
console.log("   DB_NAME:     ", process.env.DB_NAME);

// üîó Crear un pool de conexiones para eficiencia y reutilizaci√≥n
const pool = mysql.createPool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT || 3306,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD || "",
  database: process.env.DB_NAME,
  waitForConnections: true,
  connectionLimit: 10, // N√∫mero m√°ximo de conexiones simult√°neas
  queueLimit: 0,        // Sin l√≠mite de espera
});

// üåê Exportar el pool para usar en consultas con async/await
module.exports = pool;
