const db = require("../db"); // Importar conexi√≥n a la base de datos
const bcrypt = require("bcrypt");
const validator = require("validator");

// **üìå Registrar un nuevo usuario**
exports.registrarUsuario = (req, res) => {
    const { email, contrase√±a } = req.body;

    console.log(`üîç Intento de registro: ${email}`);

    // **‚úÖ Validaciones**
    if (!email || !contrase√±a) {
        console.warn("‚õî Error: Campos vac√≠os");
        return res.status(400).json({ error: "Todos los campos son obligatorios" });
    }
    if (!validator.isEmail(email)) {
        console.warn("‚õî Error: Correo inv√°lido");
        return res.status(400).json({ error: "Correo electr√≥nico no v√°lido" });
    }
    if (!/^(?=.*[A-Z])(?=.*\d).{8,}$/.test(contrase√±a)) {
        console.warn("‚õî Error: Contrase√±a no segura");
        return res.status(400).json({ error: "La contrase√±a debe contener al menos 8 caracteres, una may√∫scula y un n√∫mero." });
    }

    // **üîí Encriptar la contrase√±a**
    const contrase√±aEncriptada = bcrypt.hashSync(contrase√±a, 10);

    // **üõ† Insertar usuario en la base de datos**
    db.query("INSERT INTO usuarios (usuario_correo, usuario_contrasena) VALUES (?, ?)", [email, contrase√±aEncriptada], (error) => {
        if (error) {
            console.error("‚ùå Error al registrar usuario:", error);
            return res.status(500).json({ error: "Error al registrar usuario" });
        }
        console.log(`‚úÖ Usuario ${email} registrado correctamente`);
        res.json({ mensaje: "Usuario registrado exitosamente" });
    });
};

// **üìå Iniciar sesi√≥n (verificar usuario)**
exports.verificarUsuario = (req, res) => {
    const { email, contrase√±a } = req.body;

    console.log(`üîç Intento de inicio de sesi√≥n: ${email}`);

    if (!email || !contrase√±a) {
        console.warn("‚õî Error: Campos vac√≠os");
        return res.status(400).json({ error: "Todos los campos son obligatorios" });
    }

    db.query("SELECT * FROM usuarios WHERE usuario_correo = ?", [email], (error, resultados) => {
        if (error) {
            console.error("‚ùå Error en la base de datos:", error);
            return res.status(500).json({ error: "Error en el servidor" });
        }
        if (resultados.length === 0) {
            console.warn("‚õî Usuario no encontrado");
            return res.status(401).json({ error: "Usuario o contrase√±a incorrectos" });
        }

        const usuario = resultados[0];
        const contrase√±aValida = bcrypt.compareSync(contrase√±a, usuario.usuario_contrasena);

        if (!contrase√±aValida) {
            console.warn("‚õî Contrase√±a incorrecta");
            return res.status(401).json({ error: "Usuario o contrase√±a incorrectos" });
        }

        console.log(`‚úÖ Usuario ${email} autenticado exitosamente`);
        req.session.usuario = usuario;
        res.json({ mensaje: "Inicio de sesi√≥n exitoso" });
    });
};

// **üìå Cerrar sesi√≥n**
exports.cerrarSesion = (req, res) => {
    console.log(`üîí Cerrando sesi√≥n de usuario ${req.session.usuario?.email || "desconocido"}`);

    req.session.destroy((error) => {
        if (error) {
            console.error("‚ùå Error al cerrar sesi√≥n:", error);
        } else {
            console.log("‚úÖ Sesi√≥n cerrada correctamente");
        }
        res.json({ mensaje: "Sesi√≥n cerrada exitosamente" });
    });
};
